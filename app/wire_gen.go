// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-zero-box/app/internal/command"
	demo2 "go-zero-box/app/internal/command/demo"
	"go-zero-box/app/internal/config"
	"go-zero-box/app/internal/middleware"
	"go-zero-box/app/internal/model"
	"go-zero-box/app/internal/model/messagemodel"
	"go-zero-box/app/internal/model/usermodel"
	"go-zero-box/app/internal/queue"
	message2 "go-zero-box/app/internal/queue/message"
	"go-zero-box/app/internal/services"
	"go-zero-box/app/internal/services/demo"
	"go-zero-box/app/internal/services/message"
	"go-zero-box/app/internal/svc"
)

// Injectors from wire.go:

func initApp() *App {
	configConfig := config.NewConfig()
	redis := config.NewRedis(configConfig)
	dbTest := config.NewDBTest(configConfig)
	userModel := usermodel.NewUserModel(dbTest)
	dbTest1 := config.NewDBTest1(configConfig)
	messageModel := messagemodel.NewMessageModel(dbTest1)
	modelModel := model.NewModel(userModel, messageModel)
	service := demo.NewService(userModel)
	messageService := message.NewService()
	servicesServices := services.NewServices(service, messageService)
	authMiddleware := middleware.NewAuthMiddleware()
	middlewareMiddleware := middleware.NewMiddleware(authMiddleware)
	serviceContext := svc.NewServiceContext(redis, modelModel, servicesServices, middlewareMiddleware)
	mailQueue := message2.NewMailQueue(messageService)
	smsQueue := message2.NewSmsQueue(messageService)
	wechatQueue := message2.NewWechatQueue(messageService)
	queueQueue := queue.NewQueue(mailQueue, smsQueue, wechatQueue)
	personProcess := demo2.NewPersonProcess()
	commandCommand := command.NewCommand(personProcess)
	app := NewApp(serviceContext, queueQueue, commandCommand)
	return app
}

// wire.go:

type App struct {
	svcCtx  *svc.ServiceContext
	queue   *queue.Queue
	command *command.Command
}

func NewApp(svcCtx *svc.ServiceContext, queue2 *queue.Queue, command2 *command.Command) *App {
	return &App{svcCtx: svcCtx, queue: queue2, command: command2}
}
