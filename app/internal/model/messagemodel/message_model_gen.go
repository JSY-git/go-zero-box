// Code generated by goctl. DO NOT EDIT.

package messagemodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"go-zero-box/pkg/tools"
	"reflect"
)

var (
	messageFieldNames          = builder.RawFieldNames(&Message{})
	messageRows                = strings.Join(messageFieldNames, ",")
	messageRowsExpectAutoSet   = strings.Join(stringx.Remove(messageFieldNames, "`id`", "`created_at`", "`updated_at`"), ",")
	messageRowsWithPlaceHolder = strings.Join(stringx.Remove(messageFieldNames, "`id`", "`created_at`", "`updated_at`"), "=?,") + "=?"
)

type (
	messageModel interface {
		WithSession(session sqlx.Session) *defaultMessageModel
		Insert(ctx context.Context, data *Message) (sql.Result, error)
		InsertWithUpdate(ctx context.Context, data *Message) error
		InsertWithUpdateField(ctx context.Context, data *Message, fields []string) error
		BatchInsert(ctx context.Context, list []*Message) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Message, error)
		Update(ctx context.Context, data *Message) error
		UpdateField(ctx context.Context, data *Message, fields []string) error

		Select(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*Message, error)
		First(ctx context.Context, rowBuilder squirrel.SelectBuilder) (*Message, error)
		Count(ctx context.Context, rowBuilder squirrel.SelectBuilder) (int64, error)
		Avg(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error)
		Sum(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error)
		Max(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error)
		Min(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error)
		Aggregate(ctx context.Context, rowBuilder squirrel.SelectBuilder) (float64, error)
		DeleteFilter(ctx context.Context, where squirrel.Sqlizer) (sql.Result, error)
		UpdateFilter(ctx context.Context, updateData map[string]interface{}, where squirrel.Sqlizer) (sql.Result, error)
		SelectGroup(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error
		SelectGroupCount(ctx context.Context, rowBuilder squirrel.SelectBuilder) (int64, error)
		FirstCustom(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error
		SelectCustom(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error
		Customs(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error
		Custom(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error

		Delete(ctx context.Context, id int64) error
		TableName() string
	}

	defaultMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Message struct {
		Id        int64     `db:"id" json:"id"`
		UserId    int64     `db:"user_id" json:"user_id"`
		Content   string    `db:"content" json:"content"`
		CreatedAt time.Time `db:"created_at" json:"created_at"`
		UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	}
)

func newMessageModel(conn sqlx.SqlConn) *defaultMessageModel {
	return &defaultMessageModel{
		conn:  conn,
		table: "`message`",
	}
}

func (m *defaultMessageModel) WithSession(session sqlx.Session) *defaultMessageModel {
	return &defaultMessageModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`message`",
	}
}
func (m *defaultMessageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultMessageModel) FindOne(ctx context.Context, id int64) (*Message, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messageRows, m.table)
	var resp Message
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Insert(ctx context.Context, data *Message) (sql.Result, error) {
	m.Init(data)
	data.CreatedAt = time.Now()
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, messageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Content)
	return ret, err
}

func (m *defaultMessageModel) InsertWithUpdate(ctx context.Context, data *Message) error {
	if data.Id == 0 {
		m.Init(data)
		data.CreatedAt = time.Now()
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, messageRowsExpectAutoSet)
		ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Content)
		id, err := ret.LastInsertId()
		if err != nil {
			return err
		}
		data.Id = id
		return err
	} else {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messageRowsWithPlaceHolder)
		_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Content, data.Id)
		return err
	}
}

func (m *defaultMessageModel) InsertWithUpdateField(ctx context.Context, data *Message, fields []string) error {
	if data.Id == 0 {
		m.Init(data)
		data.CreatedAt = time.Now()
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, messageRowsExpectAutoSet)
		ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Content)
		id, err := ret.LastInsertId()
		if err != nil {
			return err
		}
		data.Id = id
		return err
	} else {
		err := m.UpdateField(ctx, data, fields)
		return err
	}
}

func (m *defaultMessageModel) BatchInsert(ctx context.Context, list []*Message) (sql.Result, error) {
	rowBuilder := squirrel.Insert(m.table).Columns(strings.Split(messageRowsExpectAutoSet, ",")...)

	for _, data := range list {
		m.Init(data)
		data.CreatedAt = time.Now()
		rowBuilder = rowBuilder.Values(data.UserId, data.Content)
	}

	query, values, err := rowBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	resp, err := m.conn.ExecCtx(ctx, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Update(ctx context.Context, data *Message) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Content, data.Id)
	return err
}

func (m *defaultMessageModel) UpdateField(ctx context.Context, data *Message, fields []string) error {
	if data.Id == 0 || len(fields) == 0 {
		return nil
	}

	var fieldVals []interface{}
	for _, column := range fields {
		fieldVal := reflect.ValueOf(data).Elem().FieldByName(tools.UderscoreToUpperCamelCase(column)).Interface()
		fieldVals = append(fieldVals, fieldVal)
	}

	fieldVals = append(fieldVals, data.Id)

	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, strings.Join(fields, "=?,")+"=?")
	_, err := m.conn.ExecCtx(ctx, query, fieldVals...)
	if err != nil {
		return err
	}

	return nil
}

func (m *defaultMessageModel) Select(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*Message, error) {
	query, values, err := rowBuilder.From(m.table).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Message
	err = m.conn.QueryRowsPartialCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) First(ctx context.Context, rowBuilder squirrel.SelectBuilder) (*Message, error) {
	query, values, err := rowBuilder.From(m.table).ToSql()
	if err != nil {
		return nil, err
	}

	var resp Message
	err = m.conn.QueryRowPartialCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return &resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Count(ctx context.Context, rowBuilder squirrel.SelectBuilder) (int64, error) {
	query, values, err := rowBuilder.RemoveColumns().From(m.table).RemoveOffset().RemoveLimit().Columns("count(*) as c").ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMessageModel) Avg(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error) {
	query, values, err := rowBuilder.RemoveColumns().From(m.table).Columns("IFNULL(AVG(" + field + "),0)").ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMessageModel) Sum(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error) {
	query, values, err := rowBuilder.RemoveColumns().From(m.table).Columns("IFNULL(SUM(" + field + "),0)").ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMessageModel) Max(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error) {
	query, values, err := rowBuilder.RemoveColumns().From(m.table).Columns("IFNULL(MAX(" + field + "),0)").ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMessageModel) Min(ctx context.Context, rowBuilder squirrel.SelectBuilder, field string) (float64, error) {
	query, values, err := rowBuilder.RemoveColumns().From(m.table).Columns("IFNULL(Min(" + field + "),0)").ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMessageModel) Aggregate(ctx context.Context, rowBuilder squirrel.SelectBuilder) (float64, error) {
	query, values, err := rowBuilder.From(m.table).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMessageModel) DeleteFilter(ctx context.Context, where squirrel.Sqlizer) (sql.Result, error) {
	query, values, err := squirrel.Delete(m.table).Where(where).ToSql()
	if err != nil {
		return nil, err
	}

	resp, err := m.conn.ExecCtx(ctx, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) UpdateFilter(ctx context.Context, updateData map[string]interface{}, where squirrel.Sqlizer) (sql.Result, error) {
	rowBuilder := squirrel.Update(m.table)
	for column, value := range updateData {
		rowBuilder = rowBuilder.Set(fmt.Sprintf("`%s`", column), value)
	}
	rowBuilder = rowBuilder.Where(where)
	query, values, err := rowBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	resp, err := m.conn.ExecCtx(ctx, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) SelectGroup(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error {
	resp = tools.GetPointer(resp)

	query, values, err := rowBuilder.From(m.table).ToSql()
	if err != nil {
		return err
	}

	err = m.conn.QueryRowsPartialCtx(ctx, resp, query, values...)
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return nil
	default:
		return err
	}
}

func (m *defaultMessageModel) SelectGroupCount(ctx context.Context, rowBuilder squirrel.SelectBuilder) (int64, error) {
	var resp int64
	query, values, err := rowBuilder.From(m.table).RemoveOffset().RemoveLimit().ToSql()
	if err != nil {
		return resp, err
	}

	query = fmt.Sprintf("SELECT COUNT(*) as c FROM ( %s ) t", query)

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return resp, nil
	default:
		return resp, err
	}
}

func (m *defaultMessageModel) FirstCustom(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error {
	resp = tools.GetPointer(resp)

	query, values, err := rowBuilder.From(m.table).ToSql()
	if err != nil {
		return err
	}

	err = m.conn.QueryRowPartialCtx(ctx, resp, query, values...)
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return nil
	default:
		return err
	}
}

func (m *defaultMessageModel) SelectCustom(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error {
	resp = tools.GetPointer(resp)

	query, values, err := rowBuilder.From(m.table).ToSql()
	if err != nil {
		return err
	}

	err = m.conn.QueryRowsPartialCtx(ctx, resp, query, values...)
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return nil
	default:
		return err
	}
}

func (m *defaultMessageModel) Customs(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error {
	resp = tools.GetPointer(resp)

	query, values, err := rowBuilder.ToSql()
	if err != nil {
		return err
	}

	err = m.conn.QueryRowsPartialCtx(ctx, resp, query, values...)
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return nil
	default:
		return err
	}
}

func (m *defaultMessageModel) Custom(ctx context.Context, rowBuilder squirrel.SelectBuilder, resp interface{}) error {
	resp = tools.GetPointer(resp)

	query, values, err := rowBuilder.ToSql()
	if err != nil {
		return err
	}

	err = m.conn.QueryRowPartialCtx(ctx, resp, query, values...)
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return nil
	default:
		return err
	}
}

func (m *defaultMessageModel) TableName() string {
	return m.table
}
